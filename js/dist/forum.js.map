{"version":3,"sources":["webpack://@WiwatSrt/best-answer/webpack/bootstrap","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['app']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['extend']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['models/Discussion']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/CommentPost']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['Model']\"","webpack://@WiwatSrt/best-answer/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['helpers/icon']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Button']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Post']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Badge']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/PostMeta']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['helpers/username']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['helpers/userOnline']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Notification']\"","webpack://@WiwatSrt/best-answer/./src/forum/components/SelectBestAnswerNotification.js","webpack://@WiwatSrt/best-answer/./src/forum/index.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerAction.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerAttribute.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerBadge.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerFirstPost.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerNotification.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","__webpack_exports__","SelectBestAnswerNotification","icon","href","discussion","this","props","notification","subject","app","route","content","translator","trans","Notification","initializers","add","Discussion","bestAnswerPost","Model","hasOne","bestAnswerUser","startUserId","attribute","Number","firstPostId","canSelectBestAnswer","extend","CommentPost","items","post","isBestAnswer","id","pushAttributes","isHidden","number","session","user","forum","Button","component","children","className","onclick","save","bestAnswerPostId","bestAnswerUserId","relationships","data","then","current","DiscussionPage","stream","update","redraw","posts","a","PostComponent","attrs","has","Badge","type","label","thisPost","userOnline","config","username","PostMeta","data-number","trust","contentHtml","notificationComponents","selectBestAnswer"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['Model'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['components/Post'];","module.exports = flarum.core.compat['components/Badge'];","module.exports = flarum.core.compat['components/PostMeta'];","module.exports = flarum.core.compat['helpers/username'];","module.exports = flarum.core.compat['helpers/userOnline'];","module.exports = flarum.core.compat['components/Notification'];","import Notification from 'flarum/components/Notification';\r\n\r\nexport default class SelectBestAnswerNotification extends Notification {\r\n    icon() {\r\n        return 'fas fa-check';\r\n    }\r\n\r\n    href() {\r\n        const notification = this.props.notification;\r\n        const discussion = notification.subject();\r\n\r\n        return app.route.discussion(discussion, 1);\r\n    }\r\n\r\n    content() {\r\n        return app.translator.trans('flarum-best-answer.forum.notification.content');\r\n    }\r\n}\r\n","import app from 'flarum/app';\r\nimport Discussion from 'flarum/models/Discussion';\r\nimport Model from 'flarum/Model';\r\nimport addBestAnswerAction from './addBestAnswerAction';\r\nimport addBestAnswerAttribute from './addBestAnswerAttribute';\r\nimport addBestAnswerBadge from './addBestAnswerBadge';\r\nimport addBestAnswerFirstPost from './addBestAnswerFirstPost';\r\nimport addBestAnswerNotification from './addBestAnswerNotification';\r\n\r\napp.initializers.add('wiwatSrt-bestAnswer', function() {\r\n    Discussion.prototype.bestAnswerPost = Model.hasOne('bestAnswerPost');\r\n    Discussion.prototype.bestAnswerUser = Model.hasOne('bestAnswerUser');\r\n    Discussion.prototype.startUserId = Model.attribute('startUserId', Number);\r\n    Discussion.prototype.firstPostId = Model.attribute('firstPostId', Number);\r\n    Discussion.prototype.canSelectBestAnswer = Model.attribute('canSelectBestAnswer');\r\n\r\n    addBestAnswerAction();\r\n    addBestAnswerAttribute();\r\n    addBestAnswerBadge();\r\n    addBestAnswerFirstPost();\r\n    addBestAnswerNotification();\r\n});\r\n","import app from 'flarum/app';\r\nimport { extend } from 'flarum/extend';\r\nimport Button from 'flarum/components/Button';\r\nimport CommentPost from 'flarum/components/CommentPost';\r\nimport DiscussionPage from 'flarum/components/DiscussionPage';\r\n\r\nexport default function() {\r\n    extend(CommentPost.prototype, 'actionItems', function(items) {\r\n        const post = this.props.post;\r\n        const discussion = this.props.post.discussion();\r\n        let isBestAnswer = discussion.bestAnswerPost() && discussion.bestAnswerPost().id() === post.id();\r\n\r\n        post.pushAttributes({ isBestAnswer });\r\n\r\n        if (post.isHidden() || post.number() === 1 || !discussion.canSelectBestAnswer() || !app.session.user) return;\r\n\r\n        if (!isBestAnswer && !app.forum.attribute('canSelectBestAnswerOwnPost') && post.user().id() === app.session.user.id()) return;\r\n\r\n        items.add(\r\n            'bestAnswer',\r\n            Button.component({\r\n                children: app.translator.trans(\r\n                    isBestAnswer ? 'flarum-best-answer.forum.remove_best_answer' : 'flarum-best-answer.forum.this_best_answer'\r\n                ),\r\n                className: 'Button Button--link',\r\n                onclick: function onclick() {\r\n                    isBestAnswer = !isBestAnswer;\r\n                    discussion\r\n                        .save({\r\n                            bestAnswerPostId: isBestAnswer ? post.id() : 0,\r\n                            bestAnswerUserId: app.session.user.id(),\r\n                            relationships: isBestAnswer\r\n                                ? { bestAnswerPost: post, bestAnswerUser: app.session.user }\r\n                                : delete discussion.data.relationships.bestAnswerPost,\r\n                        })\r\n                        .then(() => {\r\n                            if (app.current instanceof DiscussionPage) {\r\n                                app.current.stream.update();\r\n                            }\r\n                            m.redraw();\r\n                        });\r\n                    if (isBestAnswer) {\r\n                        m.route(app.route.post(discussion.posts()[0]));\r\n                    }\r\n                },\r\n            })\r\n        );\r\n    });\r\n}\r\n","import app from 'flarum/app';\r\nimport { extend } from 'flarum/extend';\r\nimport CommentPost from 'flarum/components/CommentPost';\r\nimport PostComponent from 'flarum/components/Post';\r\nimport icon from 'flarum/helpers/icon';\r\n\r\nexport default function() {\r\n    extend(CommentPost.prototype, 'headerItems', function(items) {\r\n        const post = this.props.post;\r\n\r\n        if (\r\n            post.discussion().bestAnswerPost() &&\r\n            post\r\n                .discussion()\r\n                .bestAnswerPost()\r\n                .id() === post.id() &&\r\n            !post.isHidden()\r\n        ) {\r\n            items.add(\r\n                'isBestAnswer',\r\n                <div className=\"Post--BestAnswer\">\r\n                    <span>\r\n                        {icon('fas fa-check')}\r\n                        {app.translator.trans('flarum-best-answer.forum.best_answer_button')}\r\n                    </span>\r\n\r\n                    <span className='BestAnswer--User'>\r\n                        {app.translator.trans('flarum-best-answer.forum.best_answer_label', {\r\n                            user: post.discussion().bestAnswerUser(),\r\n                            a: <a onclick={() => m.route(app.route.user(post.discussion().bestAnswerUser()))} />\r\n                        })}\r\n                    </span>\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n\r\n    extend(PostComponent.prototype, 'attrs', function(attrs) {\r\n        const post = this.props.post;\r\n\r\n        if (\r\n            post.discussion().bestAnswerPost() &&\r\n            post\r\n                .discussion()\r\n                .bestAnswerPost()\r\n                .id() === post.id() &&\r\n            !post.isHidden()\r\n        ) {\r\n            attrs.className += ' Post--bestAnswer';\r\n        }\r\n    });\r\n}\r\n","import app from 'flarum/app';\r\nimport { extend } from 'flarum/extend';\r\nimport Badge from 'flarum/components/Badge';\r\nimport Discussion from 'flarum/models/Discussion';\r\n\r\nexport default function() {\r\n    extend(Discussion.prototype, 'badges', function(items) {\r\n        if (this.bestAnswerPost() && !items.has('hidden')) {\r\n            items.add(\r\n                'bestAnswer',\r\n                m(Badge, {\r\n                    type: 'bestAnswer',\r\n                    icon: 'fas fa-check',\r\n                    label: app.translator.trans('flarum-best-answer.forum.best_answer'),\r\n                })\r\n            );\r\n        }\r\n    });\r\n}\r\n","import app from 'flarum/app';\r\nimport { extend } from 'flarum/extend';\r\nimport CommentPost from 'flarum/components/CommentPost';\r\nimport icon from 'flarum/helpers/icon';\r\nimport PostMeta from 'flarum/components/PostMeta';\r\nimport username from 'flarum/helpers/username';\r\nimport userOnline from 'flarum/helpers/userOnline';\r\n\r\nexport default function() {\r\n    extend(CommentPost.prototype, 'footerItems', function(items) {\r\n        const thisPost = this.props.post;\r\n        const discussion = thisPost.discussion();\r\n\r\n        if (discussion.bestAnswerPost() && thisPost.number() === 1 && !thisPost.isHidden()) {\r\n            const post = discussion.bestAnswerPost();\r\n\r\n            if (post.isHidden()) return;\r\n\r\n            const user = post.user();\r\n\r\n            items.add(\r\n                'bestAnswerPost',\r\n                <div className=\"CommentPost\">\r\n                    <div className=\"Post-header\">\r\n                        <ul>\r\n                            <li className=\"item-user\">\r\n                                <div className=\"PostUser\">\r\n                                    {userOnline(user)}\r\n                                    <h3>\r\n                                        <a href={app.route.user(user)} config={m.route}>\r\n                                            {username(user)}\r\n                                        </a>\r\n                                    </h3>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"item-meta\">{PostMeta.component({ post })}</li>\r\n                            <li className=\"Post--BestAnswer\">\r\n                                <a href={app.route.post(post)} config={m.route} data-number={post.number()}>\r\n                                    {icon('fas fa-check')}\r\n                                    {app.translator.trans('flarum-best-answer.forum.best_answer_button')}\r\n                                </a>\r\n\r\n                                <span className=\"BestAnswer--User\">\r\n                                    {app.translator.trans('flarum-best-answer.forum.best_answer_label', {\r\n                                        user: discussion.bestAnswerUser(),\r\n                                        a: <a onclick={() => m.route(app.route.user(discussion.bestAnswerUser()))} />\r\n                                    })}\r\n                                </span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"Post-body\">{m.trust(post.contentHtml())}</div>\r\n                </div>,\r\n                -10\r\n            );\r\n        }\r\n    });\r\n}\r\n","import SelectBestAnswerNotification from './components/SelectBestAnswerNotification';\r\n\r\nexport default () => {\r\n    app.notificationComponents.selectBestAnswer = SelectBestAnswerNotification;\r\n};\r\n"],"sourceRoot":""}